---
layout: post
title: "前端学习笔记"
date: 2017-06-13 14:18
comments: true
categories: fontend
---

由于项目需要，最近接受了一个前端项目的维护，自己的前端技术以前一直是一套jquery打天下，css也停留在css2年代，css3有什么新特性基本都不了解。好在这个项目的框架已经基本搭建起来，后期的维护就是依葫芦画瓢而已。

这个项目使用nodejs+webpack+react+dva+antdesign的技术栈,dva这个框架封装了redux，redux-saga,redux-router等等东西，可以理解为一套构建前端项目的开发规范，根据它的规范，你可以避免许多javascript项目难维护的问题。如果说以前我的前端是写字板就能搞定的东西，从这个项目开始，我必须要借助nodejs才能搞定了。这算是进步么？当然，因为借助nodejs你可以写出更简单更好维护的前端项目，而不是以前的一团乱麻。

借助这个项目，我有目的地了解了前端当前的技术栈到底已经丰富到什么程度了，现在的后端工程师想要转前端还会那么便捷容易么？以后面试的时候一个javaweb工程师还能说自己前后台都精通么？

好了，言归正传，既然从这个项目起步，首先给大家介绍一个名词：SPA（Single Page web Application）-单页面web应用。摘录一段百度百科的解释：

  单页Web应用（single page web application，SPA），就是只有一张Web页面的应用。单页应用程序 (SPA) 是加载单个HTML 页面并在用户与应用程序交互时动态更新该页面的Web应用程序。 浏览器一开始会加载必需的HTML、CSS和JavaScript，所有的操作都在这张页面上完成，都由JavaScript来控制。因此，对单页应用来说模块化的开发和设计显得相当重要。

我们的项目就是一个单页面应用，前端不用再写好页面给后端，后端再改成jsp或者模板了。数据请求、页面渲染和页面跳转全都交给前端来控制。后端还要写springmvc controller去控制页面跳转吗？答案是完全不需要，后端只提供接口返回数据。这样前后端定义好接口后，完全就可以自己干自己的了，到时候数据一对接，项目就Ok了，是不是很方便，这只是单页面的有点之一:前后端分离，独立开发，提高开发效率。

其实单页面应用的兴起是移动端Webapp发展引起的，如果使用jqueryMobile开发过项目的话，应该知道他就是一个单页面应用。又或者是我们以前做的一个系统，使用history插件+jquery.load来模拟单页面应用，后来我们发现github有个现成的[pjax](https://github.com/welefen/pjax)可以实现同样的功能。所有的这些，说明我们总是喜欢尽量减少页面的跳转和浏览器重新刷新的，局部的刷新才是我们喜欢的交互方式。

直到后来nodejs的发展，前端真是进入了空前的繁荣时代，各种框架层出不穷，写法推陈出新，样式多变。其中以spa框架发展最甚，我简单调研了下当前的几个spa框架，罗列了下他们的一些生态，自己记录下：

* angular：

  * UI组件：bootstrap
  * 语言：typescript(支持注解,强类型检查)
  * 技术：template模板语言，绑定数据模型，注解式声明，双向数据绑定

* react(facebook,instgrame):

  * UI组件：antd
  * 语言：jsx
  * 技术：框架多，需借助框架更好的使用:redux，dva

* vue(国产)：未研究过

spa发展到一定程度，大家发现一个问题，它对于seo不够友好，源代码里面什么数据都没有，只是一个空架子，不利于爬虫去爬。所以现在又有了一个新的潮流，叫ssr(server side render)-服务端渲染:借助node作为中间层服务器，通过express、koa等node服务端技术，在服务端渲染好页面，然后再传到前台，下面列了两个别人的demo，使用同样的技术栈，spa摇身一变对seo也友好了：

* vue:[https://github.com/beauty-enjoy/beauty](https://github.com/beauty-enjoy/beauty)
* react：[https://github.com/ibufu/douban-movie-react-ssr](https://github.com/ibufu/douban-movie-react-ssr)

spa后来又衍生出来一个新的概念，这个概念比较新，应该出来不久，叫渐进式web应用开发，因为spa应用的最大特点及时第一次加载的时候所有的资源都会下载到本地，后期只做数据的交互没有页面的跳转和其他资源请求，这跟传统的移动端app是不是很像，所以渐进式web应用开发就是为了替代传统原生app应用而出现的，它有什么特点呢：

* 安全 – 通过 HTTPS 来提供服务来防止网络窥探，保证内容不被篡改。
* 渐进式 – 能够让每一位用户使用，无论用户使用什么浏览器，因为它是始终以渐进增强为原则
* 响应式 – 适应任何环境：桌面电脑、智能手机、平板电脑，或者其他设备。
* 不依赖网络连接 – 通过用 service workers 增强，可以在离线或者低质量网络下工作
* 类原生应用 – 有像原生应用般的交互和导航给用户原生应用般的体验，因为它是建立在 app shell model 上的。
* 持续更新 – 受益于 service worker 的更新进程，应用能够始终保持更新。
* 可发现 – 可识别为“应用程序”，是得益于 W3C manifests 元数据和 service worker 的登记，让搜索引擎能够找到 web 应用。
* 可再次访问 – 通过推送通知等特性让用户再次访问变得容易。
* 可安装 – 允许用户保留对他们有用的应用在主屏幕上，不需要通过应用商店。
* 可链接 – 通过 URL 可以轻松分享应用，不用复杂的安装即可运行。

看完它的特点，是不是一拍大腿，以后还装什么app啊。确实，传统app的推广费用越来越高，用户下载安装的热情越来越小，让你收藏一个网站用户的时间成本更小，所以优势很明显，后面大家要跟上潮流啊。

说了这么多，只是简单记录下，有空可以翻阅下看看，大家有兴趣就去深入研究，肯定会有所收获。
